{"ast":null,"code":"/*\nimport namor from 'namor'\n\nconst range = len => {\n    const arr = []\n    for (let i = 0; i < len; i++) {\n        arr.push(i)\n    }\n    return arr\n}\n\n\n\nconst newPerson = () => {\n    const statusChance = Math.random()\n    return {\n        candidateName: namor.generate({ words: 1, numbers: 0 }),\n        candidateId: namor.generate({ words: 0, numbers: 5 }),\n        organization: namor.generate({ words: 1, numbers: 0 }),\n        assessment: namor.generate({ words: 1, numbers: 0 }),\n        createdDate: Math.floor(Math.random() * 30),\n        externalId: namor.generate({ words: 0, numbers: 5 }),\n        lastActivity: Math.floor(Math.random() * 100),\n        progress: Math.floor(Math.random() * 100),\n        status:\n            statusChance > 0.66\n                ? 'relationship'\n                : statusChance > 0.33\n                ? 'complicated'\n                : 'single',\n    }\n}\n\nexport default function makeData(...lens) {\n    const makeDataLevel = (depth = 0) => {\n        const len = lens[depth]\n        return range(len).map(d => {\n            return {\n                ...newPerson(),\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n            }\n        })\n    }\n\n    return makeDataLevel()\n}\n*/\nimport namor from 'namor';\n\nconst range = len => {\n  const arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nlet i = -1;\nlet data = {\n  candidateName: {\n    first: ['wasim', 'shrest', 'juneja'],\n    second: ['a', 'b', 'c']\n  },\n  candidateId: [1, 2, 3, 3, 4, 56, 6, 7]\n};\n\nlet returnData = function (data, field, i) {\n  return data[field][i];\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  i = i + 1;\n  return {\n    /*candidateName: namor.generate({ words: 1, numbers: 0 }),*/\n    candidateName: returnData(data, \"candidateName\", i),\n    candidateId: returnData(data, \"candidateId\", i),\n    organization: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    assessment: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    createdDate: Math.floor(Math.random() * 30),\n    externalId: namor.generate({\n      words: 0,\n      numbers: 5\n    }),\n    lastActivity: Math.floor(Math.random() * 100),\n    firstName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    lastName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    test: Math.floor(Math.random() * 100),\n    status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single'\n  };\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(d => {\n      return { ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n/*\nexport default function makeData(len = 5553) {\n    return range(len).map(d => {\n        return {\n            ...newPerson(),\n            children: range(10).map(newPerson)\n        };\n    });\n}*/","map":{"version":3,"sources":["/home/user/Downloads/BasicReact/basicreact/src/makeData.js"],"names":["namor","range","len","arr","i","push","data","candidateName","first","second","candidateId","returnData","field","newPerson","statusChance","Math","random","organization","generate","words","numbers","assessment","createdDate","floor","externalId","lastActivity","firstName","lastName","age","visits","progress","test","status","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined"],"mappings":"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","sourcesContent":["/*\nimport namor from 'namor'\n\nconst range = len => {\n    const arr = []\n    for (let i = 0; i < len; i++) {\n        arr.push(i)\n    }\n    return arr\n}\n\n\n\nconst newPerson = () => {\n    const statusChance = Math.random()\n    return {\n        candidateName: namor.generate({ words: 1, numbers: 0 }),\n        candidateId: namor.generate({ words: 0, numbers: 5 }),\n        organization: namor.generate({ words: 1, numbers: 0 }),\n        assessment: namor.generate({ words: 1, numbers: 0 }),\n        createdDate: Math.floor(Math.random() * 30),\n        externalId: namor.generate({ words: 0, numbers: 5 }),\n        lastActivity: Math.floor(Math.random() * 100),\n        progress: Math.floor(Math.random() * 100),\n        status:\n            statusChance > 0.66\n                ? 'relationship'\n                : statusChance > 0.33\n                ? 'complicated'\n                : 'single',\n    }\n}\n\nexport default function makeData(...lens) {\n    const makeDataLevel = (depth = 0) => {\n        const len = lens[depth]\n        return range(len).map(d => {\n            return {\n                ...newPerson(),\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n            }\n        })\n    }\n\n    return makeDataLevel()\n}\n*/\nimport namor from 'namor'\n\nconst range = len => {\n    const arr = []\n    for (let i = 0; i < len; i++) {\n        arr.push(i)\n    }\n    return arr\n}\n\nlet i=-1\n\nlet data = {\n    candidateName : {first:['wasim', 'shrest', 'juneja'],\n    second : ['a', 'b', 'c']},\n    candidateId : [1,2,3,3,4,56,6,7]\n}\n\nlet returnData = function(data, field, i)\n{\n    return data[field][i]\n}\n\nconst newPerson = () => {\n    const statusChance = Math.random()\n    i = i +1\n    return {\n\n        /*candidateName: namor.generate({ words: 1, numbers: 0 }),*/\n        candidateName : returnData(data, \"candidateName\", i),\n        candidateId: returnData(data, \"candidateId\", i),\n        organization: namor.generate({ words: 1, numbers: 0 }),\n        assessment: namor.generate({ words: 1, numbers: 0 }),\n        createdDate: Math.floor(Math.random() * 30),\n        externalId: namor.generate({ words: 0, numbers: 5 }),\n        lastActivity: Math.floor(Math.random() * 100),\n        firstName: namor.generate({ words: 1, numbers: 0 }),\n        lastName: namor.generate({ words: 1, numbers: 0 }),\n        age: Math.floor(Math.random() * 30),\n        visits: Math.floor(Math.random() * 100),\n        progress: Math.floor(Math.random() * 100),\n        test: Math.floor(Math.random() * 100),\n        status:\n            statusChance > 0.66\n                ? 'relationship'\n                : statusChance > 0.33\n                ? 'complicated'\n                : 'single',\n    }\n}\n\nexport default function makeData(...lens) {\n    const makeDataLevel = (depth = 0) => {\n        const len = lens[depth]\n        return range(len).map(d => {\n            return {\n                ...newPerson(),\n\n                subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n            }\n        })\n    }\n\n\n\n\n    return makeDataLevel()\n}\n/*\nexport default function makeData(len = 5553) {\n    return range(len).map(d => {\n        return {\n            ...newPerson(),\n            children: range(10).map(newPerson)\n        };\n    });\n}*/\n"]},"metadata":{},"sourceType":"module"}