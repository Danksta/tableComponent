{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/BasicReact/basicreact/src/App.js\";\n\n/*\nimport React, { Component } from 'react';\nimport './App.css';\nimport HelloWorld from './components/HelloWorld';\n  import Select from './components/Select';\n\nclass App extends Component{\n \n  state = {\n\n    selected_value:\"text\",\n    select_id:\"\",\n    some_value:[\"date\",\"datetime\",\"email\"]\n\n    \n\n  }\n  \n  optionChangeHandler =(e)=>{\n    console.log(\"this is e\", e)\n    this.setState({\n\n      selected_value: e \n      \n\n    }\n  )\n  }\n\n  CallInterval =() =>{\n    console.log(\"intervall call\")\n  }\n\n\n render(){\n   console.log(\"final state\",this.state)\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {  /!* <img src={logo} className=\"App-logo\" alt=\"logo\" />       *!/}\n         \n          <HelloWorld />\n\n          <Select select_id=\"type_of_input\" selected_value={this.state.selected_value} some_value={this.state.some_value} \n          changed={this.optionChangeHandler}\n\n          />\n           \n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n*/\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTable } from 'react-table';\nimport { Link } from 'react-router-dom';\nimport makeData from './makeData';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    \n\n\n    tr {\n    \n      height: 70px;\n  width: 1318px;\n      color: #4A4A4A;\n      font-family: Roboto;\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 19px;\n      :first-child {\n     td{border-top: 2px solid rgba(143,143,143,0.2);}\n      \n      }\n      :last-child {\n      \n        td {\n        color: green;\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      \n      :first-child{ \n      font-weight: bold;      \n      border-left: 2px solid rgba(143,143,143,0.2);\n      };\n      :second-child{color: green};\n      :last-child {\n      border-right: 2px solid rgba(143,143,143,0.2);     \n      }\n    }\n  }\n`;\n\nfunction Table({\n  columns,\n  data\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // Render the UI for your table\n\n  return React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), headerGroup.headers.map(column => React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), column.render('Header')))))), React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  })));\n}\n\nfunction App() {\n  const columns = React.useMemo(() => [{\n    /*Header: ' ',\n    columns: [\n        {*/\n    Header: 'Candidate',\n    accessor: 'candidateName'\n  }, {\n    Header: 'Candidate ID',\n    id: 'candidateId',\n    accessor: d => d.candidateId,\n    Cell: d => React.createElement(\"a\", {\n      href: d.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" \", d.value, \" \")\n  }, {\n    Header: 'Organization',\n    accessor: 'organization'\n  }, {\n    Header: 'Assessment',\n    accessor: 'assessment'\n  }, {\n    Header: 'Created Date',\n    accessor: 'createdDate'\n  }, {\n    Header: 'External ID',\n    accessor: 'externalId'\n  }, {\n    Header: 'Last Activity',\n    accessor: 'lastActivity'\n  }], []);\n  const data = React.useMemo(() => makeData(20), []);\n  return React.createElement(Styles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Table, {\n    columns: columns,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }));\n}\n\nexport default App;\n/*\nimport React from 'react'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from './components/EnhancedTable'\nimport makeData from './makeData'\n\nconst App = () => {\n    const columns = React.useMemo(\n        () => [\n            /!*{\n                Header: 'First Name',\n                accessor: 'firstName',\n            },\n            {\n                Header: 'Last Name',\n                accessor: 'lastName',\n            },\n            {\n                Header: 'Age',\n                accessor: 'age',\n            },\n            {\n                Header: 'Visits',\n                accessor: 'visits',\n            },\n            {\n                Header: 'Status',\n                accessor: 'status',\n            },\n            {\n                Header: 'Profile Progress',\n                accessor: 'progress',\n            },*!/\n            {\n                Header: 'Candidate',\n                accessor: 'candidateName',\n            },\n            {\n                Header: 'Candidate ID',\n                accessor: 'candidateId',\n            },\n            {\n                Header: 'Organization',\n                accessor: 'organization',\n            },\n            {\n                Header: 'Assessment',\n                accessor: 'assessment',\n            },\n            {\n                Header: 'Created Date',\n                accessor: 'createdDate',\n            },\n            {\n                Header: 'External ID',\n                accessor: 'externalId',\n            },\n            {\n                Header: 'Last Activity',\n                accessor: 'lastActivity',\n            },\n        ],\n        []\n    )\n\n    const [data, setData] = React.useState(React.useMemo(() => makeData(40), []))\n    const [skipPageReset, setSkipPageReset] = React.useState(false)\n\n    // We need to keep the table from resetting the pageIndex when we\n    // Update data. So we can keep track of that flag with a ref.\n\n    // When our cell renderer calls updateMyData, we'll use\n    // the rowIndex, columnId and new value to update the\n    // original data\n    const updateMyData = (rowIndex, columnId, value) => {\n        // We also turn on the flag to not reset the page\n        setSkipPageReset(true)\n        setData(old =>\n            old.map((row, index) => {\n                if (index === rowIndex) {\n                    return {\n                        ...old[rowIndex],\n                        [columnId]: value,\n                    }\n                }\n                return row\n            })\n        )\n    }\n\n    return (\n        <div>\n            {/!*<CssBaseline />*!/}\n            <EnhancedTable\n                columns={columns}\n                data={data}\n                setData={setData}\n                updateMyData={updateMyData}\n                skipPageReset={skipPageReset}\n            />\n        </div>\n    )\n}\n\nexport default App\n\n*/","map":{"version":3,"sources":["/home/user/Downloads/BasicReact/basicreact/src/App.js"],"names":["React","styled","useTable","Link","makeData","Styles","div","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","App","useMemo","Header","accessor","id","d","candidateId","Cell","value"],"mappings":"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","sourcesContent":["/*\nimport React, { Component } from 'react';\nimport './App.css';\nimport HelloWorld from './components/HelloWorld';\n  import Select from './components/Select';\n\nclass App extends Component{\n \n  state = {\n\n    selected_value:\"text\",\n    select_id:\"\",\n    some_value:[\"date\",\"datetime\",\"email\"]\n\n    \n\n  }\n  \n  optionChangeHandler =(e)=>{\n    console.log(\"this is e\", e)\n    this.setState({\n\n      selected_value: e \n      \n\n    }\n  )\n  }\n\n  CallInterval =() =>{\n    console.log(\"intervall call\")\n  }\n\n\n render(){\n   console.log(\"final state\",this.state)\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {  /!* <img src={logo} className=\"App-logo\" alt=\"logo\" />       *!/}\n         \n          <HelloWorld />\n\n          <Select select_id=\"type_of_input\" selected_value={this.state.selected_value} some_value={this.state.some_value} \n          changed={this.optionChangeHandler}\n\n          />\n           \n      </header>\n    </div>\n  );\n}\n}\nexport default App;\n*/\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport {useTable} from 'react-table'\nimport { Link } from 'react-router-dom'\n\n\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    \n\n\n    tr {\n    \n      height: 70px;\n  width: 1318px;\n      color: #4A4A4A;\n      font-family: Roboto;\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 19px;\n      :first-child {\n     td{border-top: 2px solid rgba(143,143,143,0.2);}\n      \n      }\n      :last-child {\n      \n        td {\n        color: green;\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      \n      :first-child{ \n      font-weight: bold;      \n      border-left: 2px solid rgba(143,143,143,0.2);\n      };\n      :second-child{color: green};\n      :last-child {\n      border-right: 2px solid rgba(143,143,143,0.2);     \n      }\n    }\n  }\n`\n\nfunction Table({columns, data}) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    })\n\n    // Render the UI for your table\n    return (\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nfunction App() {\n    const columns = React.useMemo(\n        () => [\n            {\n                /*Header: ' ',\n                columns: [\n                    {*/\n                Header: 'Candidate',\n                accessor: 'candidateName',\n            },\n            {\n                Header: 'Candidate ID',\n                id: 'candidateId',\n                accessor: d => d.candidateId,\n                Cell: d =><a href={d.value}> {d.value} </a>\n\n            },\n            {\n                Header: 'Organization',\n                accessor: 'organization',\n            },\n            {\n                Header: 'Assessment',\n                accessor: 'assessment',\n            },\n            {\n                Header: 'Created Date',\n                accessor: 'createdDate',\n            },\n            {\n                Header: 'External ID',\n                accessor: 'externalId',\n            },\n            {\n                Header: 'Last Activity',\n                accessor: 'lastActivity',\n            },\n        ],\n        []\n    )\n\n    const data = React.useMemo(() => makeData(20), [])\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data}/>\n        </Styles>\n    )\n}\n\nexport default App\n/*\nimport React from 'react'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from './components/EnhancedTable'\nimport makeData from './makeData'\n\nconst App = () => {\n    const columns = React.useMemo(\n        () => [\n            /!*{\n                Header: 'First Name',\n                accessor: 'firstName',\n            },\n            {\n                Header: 'Last Name',\n                accessor: 'lastName',\n            },\n            {\n                Header: 'Age',\n                accessor: 'age',\n            },\n            {\n                Header: 'Visits',\n                accessor: 'visits',\n            },\n            {\n                Header: 'Status',\n                accessor: 'status',\n            },\n            {\n                Header: 'Profile Progress',\n                accessor: 'progress',\n            },*!/\n            {\n                Header: 'Candidate',\n                accessor: 'candidateName',\n            },\n            {\n                Header: 'Candidate ID',\n                accessor: 'candidateId',\n            },\n            {\n                Header: 'Organization',\n                accessor: 'organization',\n            },\n            {\n                Header: 'Assessment',\n                accessor: 'assessment',\n            },\n            {\n                Header: 'Created Date',\n                accessor: 'createdDate',\n            },\n            {\n                Header: 'External ID',\n                accessor: 'externalId',\n            },\n            {\n                Header: 'Last Activity',\n                accessor: 'lastActivity',\n            },\n        ],\n        []\n    )\n\n    const [data, setData] = React.useState(React.useMemo(() => makeData(40), []))\n    const [skipPageReset, setSkipPageReset] = React.useState(false)\n\n    // We need to keep the table from resetting the pageIndex when we\n    // Update data. So we can keep track of that flag with a ref.\n\n    // When our cell renderer calls updateMyData, we'll use\n    // the rowIndex, columnId and new value to update the\n    // original data\n    const updateMyData = (rowIndex, columnId, value) => {\n        // We also turn on the flag to not reset the page\n        setSkipPageReset(true)\n        setData(old =>\n            old.map((row, index) => {\n                if (index === rowIndex) {\n                    return {\n                        ...old[rowIndex],\n                        [columnId]: value,\n                    }\n                }\n                return row\n            })\n        )\n    }\n\n    return (\n        <div>\n            {/!*<CssBaseline />*!/}\n            <EnhancedTable\n                columns={columns}\n                data={data}\n                setData={setData}\n                updateMyData={updateMyData}\n                skipPageReset={skipPageReset}\n            />\n        </div>\n    )\n}\n\nexport default App\n\n*/\n"]},"metadata":{},"sourceType":"module"}