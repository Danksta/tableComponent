{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/BasicReact/basicreact/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport HelloWorld from './components/HelloWorld';\nimport Select from './components/Select';\nimport CustomTable from \"./Table\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selected_value: \"text\",\n      select_id: \"\",\n      some_value: [\"date\", \"datetime\", \"email\"]\n    };\n\n    this.optionChangeHandler = e => {\n      console.log(\"this is e\", e);\n      this.setState({\n        selected_value: e\n      });\n    };\n\n    this.CallInterval = () => {\n      console.log(\"intervall call\");\n    };\n  }\n\n  render() {\n    console.log(\"final state\", this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(HelloWorld, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Select, {\n      select_id: \"type_of_input\",\n      selected_value: this.state.selected_value,\n      some_value: this.state.some_value,\n      changed: this.optionChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"customTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \" \", React.createElement(CustomTable, {\n      initialStateDict: {\n        pageIndex: 5,\n        pageSize: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), \" \")));\n  }\n\n}\n\nexport default App;\n/*\nimport React from 'react'\nimport styled from 'styled-components'\nimport {usePagination, useTable} from 'react-table'\nimport Avatar, {ConfigProvider} from \"react-avatar\";\nimport {data1} from './Data'\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    \n\n\n    tr {\n    \n      height: 70px;\n  width: 1318px;\n      color: #4A4A4A;\n      font-family: Roboto;\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 19px;\n      :first-child {\n     td{border-top: 2px solid rgba(143,143,143,0.2);}\n      \n      }\n      :last-child {\n      \n        td {\n        color: green;\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      \n      :first-child{ \n      font-weight: bold;      \n      border-left: 2px solid rgba(143,143,143,0.2);\n      };\n      :second-child{color: green};\n      :last-child {\n      border-right: 2px solid rgba(143,143,143,0.2);     \n      }\n    }\n  }\n`\n\n// Use the useTable hook to create your table configuration\nconsole.log(\"data is \" + JSON.stringify(data1))\nlet data = data1\nfunction Table({columns, data}) {\n    // Use the state and functions returned from useTable to build your UI\n    let {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page, // Instead of using 'rows', we'll use page,\n        // which has only the rows for the active page\n\n        // The rest of these things are super handy, too ;)\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: {pageIndex, pageSize},\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {pageIndex: 2},\n        },\n        usePagination\n    )\n    pageIndex=0\n\n    // Render the UI for your table\n    return (\n        <>\n      <pre>\n        <code>\n          {JSON.stringify(\n              {\n                  pageIndex,\n                  pageSize,\n                  pageCount,\n                  canNextPage,\n                  canPreviousPage,\n              },\n              null,\n              2\n          )}\n        </code>\n      </pre>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n            {/!*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      *!/}\n            <div className=\"pagination\">\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    {'<<'}\n                </button>\n                {' '}\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    {'<'}\n                </button>\n                {' '}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                    {'>'}\n                </button>\n                {' '}\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    {'>>'}\n                </button>\n                {' '}\n                <span>\n          Page{' '}\n                    <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n                <span>\n          | Go to page:{' '}\n                    <input\n                        type=\"number\"\n                        defaultValue={pageIndex + 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(page)\n                        }}\n                        style={{width: '100px'}}\n                    />\n        </span>{' '}\n                <select\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                >\n                    {[10, 20, 30, 40, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </>\n    )\n}\n\nlet mainContentStyle = {\n    height: \"16px\",\n    width: \"144px\",\n    color: \"red\",\n    fontFamily: \"Roboto\",\n    fontSize: \"14px\",\n    lineHeight: \"19px\"\n}\n\nlet colors = ['black', 'green', 'blue']\n\n\nfunction App() {\n\n\n    const columns = [\n        {\n            Header: '',\n            accessor: 'profileImage',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span className=\"class-for-name\" style={{height: \"16px\"}}><ConfigProvider\n                                colors={colors}><Avatar name={row.original.candidateName} size=\"30\"\n                                                        round={true}/></ConfigProvider></span>\n                    </div>\n                )\n            }\n        },\n        {\n            /!*Header: ' ',\n            columns: [\n                {*!/\n            Header: 'Candidate',\n            accessor: 'candidateName',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span className=\"class-for-name\"\n                                  style={{height: \"16px\"}}>{row.original.candidateName}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.candidateEmail}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Candidate ID',\n            id: \"candidateId\",\n            accessor: \"candidateId\",\n            ignoreRowClick: true,\n            Cell: ({row}) => <a href={row.original.candidateId} onClick={() => {\n            }}>{row.original.candidateId}</a>,\n\n        },\n        {\n            Header: 'Organization',\n            accessor: 'organization',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span onMouseOver={() => {\n                                console.log(\"henlo\")\n                            }} className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.organization}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.organization}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Assessment',\n            accessor: 'assessment',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                        <span className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.assessment}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.assessmentId}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Created Date',\n            accessor: 'createdDate',\n        },\n        {\n            Header: 'External ID',\n            accessor: 'externalId',\n        },\n        {\n            Header: 'Last Activity',\n            accessor: 'lastActivity',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                        <span className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.lastActivity}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.lastActivityDate}</span>\n                    </div>\n                )\n            }\n        },\n    ]\n\n    /!*const data = React.useMemo(() => makeData(20), [])*!/\n\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} pageIndex={0}/>\n        </Styles>\n    )\n}\n\nexport default App*/\n\n/*\nimport React from 'react'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from './components/EnhancedTable'\nimport makeData from './makeData'\n\nconst App = () => {\nconst columns = React.useMemo(\n() => [\n/!*{\nHeader: 'First Name',\naccessor: 'firstName',\n},\n{\n    Header: 'Last Name',\n    accessor: 'lastName',\n},\n{\n    Header: 'Age',\n    accessor: 'age',\n},\n{\n    Header: 'Visits',\n    accessor: 'visits',\n},\n{\n    Header: 'Status',\n    accessor: 'status',\n},\n{\n    Header: 'Profile Progress',\n    accessor: 'progress',\n},*!/\n{\n    Header: 'Candidate',\n    accessor: 'candidateName',\n},\n{\n    Header: 'Candidate ID',\n    accessor: 'candidateId',\n},\n{\n    Header: 'Organization',\n    accessor: 'organization',\n},\n{\n    Header: 'Assessment',\n    accessor: 'assessment',\n},\n{\n    Header: 'Created Date',\n    accessor: 'createdDate',\n},\n{\n    Header: 'External ID',\n    accessor: 'externalId',\n},\n{\n    Header: 'Last Activity',\n    accessor: 'lastActivity',\n},\n],\n[]\n)\n\nconst [data, setData] = React.useState(React.useMemo(() => makeData(40), []))\nconst [skipPageReset, setSkipPageReset] = React.useState(false)\n\n// We need to keep the table from resetting the pageIndex when we\n// Update data. So we can keep track of that flag with a ref.\n\n// When our cell renderer calls updateMyData, we'll use\n// the rowIndex, columnId and new value to update the\n// original data\nconst updateMyData = (rowIndex, columnId, value) => {\n// We also turn on the flag to not reset the page\nsetSkipPageReset(true)\nsetData(old =>\nold.map((row, index) => {\nif (index === rowIndex) {\nreturn {\n...old[rowIndex],\n[columnId]: value,\n}\n}\nreturn row\n})\n)\n}\n\nreturn (\n<div>\n    {/!*<CssBaseline / > * !/}\n        <EnhancedTable\n        columns={columns}\n        data={data}\n        setData={setData}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n        />\n        </div>\n        )\n    }\n\n    export default App\n\n    */","map":{"version":3,"sources":["/home/user/Downloads/BasicReact/basicreact/src/App.js"],"names":["React","Component","HelloWorld","Select","CustomTable","App","state","selected_value","select_id","some_value","optionChangeHandler","e","console","log","setState","CallInterval","render","pageIndex","pageSize"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,SAAxB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBK,KAFwB,GAEhB;AAEJC,MAAAA,cAAc,EAAE,MAFZ;AAGJC,MAAAA,SAAS,EAAE,EAHP;AAIJC,MAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB;AAJR,KAFgB;;AAAA,SAWxBC,mBAXwB,GAWDC,CAAD,IAAO;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,CAAzB;AACA,WAAKG,QAAL,CAAc;AAENP,QAAAA,cAAc,EAAEI;AAFV,OAAd;AAOH,KApBuB;;AAAA,SAsBxBI,YAtBwB,GAsBT,MAAM;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAxBuB;AAAA;;AA2BxBG,EAAAA,MAAM,GAAG;AACLJ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKP,KAAhC;AACA,WAEI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAKI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,cAAc,EAAE,KAAKA,KAAL,CAAWC,cAA7D;AACQ,MAAA,UAAU,EAAE,KAAKD,KAAL,CAAWG,UAD/B;AAEQ,MAAA,OAAO,EAAE,KAAKC,mBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAUI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuB,oBAAC,WAAD;AAAa,MAAA,gBAAgB,EAAI;AAACO,QAAAA,SAAS,EAAE,CAAZ;AAAeC,QAAAA,QAAQ,EAAG;AAA1B,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,MAVJ,CADJ,CAFJ;AAkBH;;AA/CuB;;AAkD5B,eAAeb,GAAf;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkTA","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport HelloWorld from './components/HelloWorld';\nimport Select from './components/Select';\nimport CustomTable from \"./Table\";\n\nclass App extends Component {\n\n    state = {\n\n        selected_value: \"text\",\n        select_id: \"\",\n        some_value: [\"date\", \"datetime\", \"email\"]\n\n\n    }\n\n    optionChangeHandler = (e) => {\n        console.log(\"this is e\", e)\n        this.setState({\n\n                selected_value: e\n\n\n            }\n        )\n    }\n\n    CallInterval = () => {\n        console.log(\"intervall call\")\n    }\n\n\n    render() {\n        console.log(\"final state\", this.state)\n        return (\n\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {  /* <img src={logo} className=\"App-logo\" alt=\"logo\" />       */}\n\n                    <HelloWorld/>\n\n                    <Select select_id=\"type_of_input\" selected_value={this.state.selected_value}\n                            some_value={this.state.some_value}\n                            changed={this.optionChangeHandler}\n\n                    />\n                    <div id=\"customTable\"> <CustomTable initialStateDict = {{pageIndex: 5, pageSize : 10}} /> </div>\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n/*\nimport React from 'react'\nimport styled from 'styled-components'\nimport {usePagination, useTable} from 'react-table'\nimport Avatar, {ConfigProvider} from \"react-avatar\";\nimport {data1} from './Data'\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    \n\n\n    tr {\n    \n      height: 70px;\n  width: 1318px;\n      color: #4A4A4A;\n      font-family: Roboto;\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 19px;\n      :first-child {\n     td{border-top: 2px solid rgba(143,143,143,0.2);}\n      \n      }\n      :last-child {\n      \n        td {\n        color: green;\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      \n      :first-child{ \n      font-weight: bold;      \n      border-left: 2px solid rgba(143,143,143,0.2);\n      };\n      :second-child{color: green};\n      :last-child {\n      border-right: 2px solid rgba(143,143,143,0.2);     \n      }\n    }\n  }\n`\n\n// Use the useTable hook to create your table configuration\nconsole.log(\"data is \" + JSON.stringify(data1))\nlet data = data1\nfunction Table({columns, data}) {\n    // Use the state and functions returned from useTable to build your UI\n    let {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page, // Instead of using 'rows', we'll use page,\n        // which has only the rows for the active page\n\n        // The rest of these things are super handy, too ;)\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: {pageIndex, pageSize},\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {pageIndex: 2},\n        },\n        usePagination\n    )\n    pageIndex=0\n\n    // Render the UI for your table\n    return (\n        <>\n      <pre>\n        <code>\n          {JSON.stringify(\n              {\n                  pageIndex,\n                  pageSize,\n                  pageCount,\n                  canNextPage,\n                  canPreviousPage,\n              },\n              null,\n              2\n          )}\n        </code>\n      </pre>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                            })}\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n            {/!*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      *!/}\n            <div className=\"pagination\">\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    {'<<'}\n                </button>\n                {' '}\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    {'<'}\n                </button>\n                {' '}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                    {'>'}\n                </button>\n                {' '}\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    {'>>'}\n                </button>\n                {' '}\n                <span>\n          Page{' '}\n                    <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n                <span>\n          | Go to page:{' '}\n                    <input\n                        type=\"number\"\n                        defaultValue={pageIndex + 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(page)\n                        }}\n                        style={{width: '100px'}}\n                    />\n        </span>{' '}\n                <select\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                >\n                    {[10, 20, 30, 40, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </>\n    )\n}\n\nlet mainContentStyle = {\n    height: \"16px\",\n    width: \"144px\",\n    color: \"red\",\n    fontFamily: \"Roboto\",\n    fontSize: \"14px\",\n    lineHeight: \"19px\"\n}\n\nlet colors = ['black', 'green', 'blue']\n\n\nfunction App() {\n\n\n    const columns = [\n        {\n            Header: '',\n            accessor: 'profileImage',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span className=\"class-for-name\" style={{height: \"16px\"}}><ConfigProvider\n                                colors={colors}><Avatar name={row.original.candidateName} size=\"30\"\n                                                        round={true}/></ConfigProvider></span>\n                    </div>\n                )\n            }\n        },\n        {\n            /!*Header: ' ',\n            columns: [\n                {*!/\n            Header: 'Candidate',\n            accessor: 'candidateName',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span className=\"class-for-name\"\n                                  style={{height: \"16px\"}}>{row.original.candidateName}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.candidateEmail}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Candidate ID',\n            id: \"candidateId\",\n            accessor: \"candidateId\",\n            ignoreRowClick: true,\n            Cell: ({row}) => <a href={row.original.candidateId} onClick={() => {\n            }}>{row.original.candidateId}</a>,\n\n        },\n        {\n            Header: 'Organization',\n            accessor: 'organization',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                            <span onMouseOver={() => {\n                                console.log(\"henlo\")\n                            }} className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.organization}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.organization}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Assessment',\n            accessor: 'assessment',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                        <span className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.assessment}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.assessmentId}</span>\n                    </div>\n                )\n            }\n        },\n        {\n            Header: 'Created Date',\n            accessor: 'createdDate',\n        },\n        {\n            Header: 'External ID',\n            accessor: 'externalId',\n        },\n        {\n            Header: 'Last Activity',\n            accessor: 'lastActivity',\n            Cell: ({row}) => {\n                return (\n                    <div>\n                        <span className=\"class-for-name\" style={{height: \"16px\"}}>{row.original.lastActivity}</span>\n                        <br></br>\n                        <span className=\"class-for-description\"\n                              style={{color: \"#909090\"}}>{row.original.lastActivityDate}</span>\n                    </div>\n                )\n            }\n        },\n    ]\n\n    /!*const data = React.useMemo(() => makeData(20), [])*!/\n\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} pageIndex={0}/>\n        </Styles>\n    )\n}\n\nexport default App*/\n\n\n/*\nimport React from 'react'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from './components/EnhancedTable'\nimport makeData from './makeData'\n\nconst App = () => {\nconst columns = React.useMemo(\n() => [\n/!*{\nHeader: 'First Name',\naccessor: 'firstName',\n},\n{\n    Header: 'Last Name',\n    accessor: 'lastName',\n},\n{\n    Header: 'Age',\n    accessor: 'age',\n},\n{\n    Header: 'Visits',\n    accessor: 'visits',\n},\n{\n    Header: 'Status',\n    accessor: 'status',\n},\n{\n    Header: 'Profile Progress',\n    accessor: 'progress',\n},*!/\n{\n    Header: 'Candidate',\n    accessor: 'candidateName',\n},\n{\n    Header: 'Candidate ID',\n    accessor: 'candidateId',\n},\n{\n    Header: 'Organization',\n    accessor: 'organization',\n},\n{\n    Header: 'Assessment',\n    accessor: 'assessment',\n},\n{\n    Header: 'Created Date',\n    accessor: 'createdDate',\n},\n{\n    Header: 'External ID',\n    accessor: 'externalId',\n},\n{\n    Header: 'Last Activity',\n    accessor: 'lastActivity',\n},\n],\n[]\n)\n\nconst [data, setData] = React.useState(React.useMemo(() => makeData(40), []))\nconst [skipPageReset, setSkipPageReset] = React.useState(false)\n\n// We need to keep the table from resetting the pageIndex when we\n// Update data. So we can keep track of that flag with a ref.\n\n// When our cell renderer calls updateMyData, we'll use\n// the rowIndex, columnId and new value to update the\n// original data\nconst updateMyData = (rowIndex, columnId, value) => {\n// We also turn on the flag to not reset the page\nsetSkipPageReset(true)\nsetData(old =>\nold.map((row, index) => {\nif (index === rowIndex) {\nreturn {\n...old[rowIndex],\n[columnId]: value,\n}\n}\nreturn row\n})\n)\n}\n\nreturn (\n<div>\n    {/!*<CssBaseline / > * !/}\n        <EnhancedTable\n        columns={columns}\n        data={data}\n        setData={setData}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n        />\n        </div>\n        )\n    }\n\n    export default App\n\n    */\n"]},"metadata":{},"sourceType":"module"}